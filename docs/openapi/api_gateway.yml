openapi: 3.0.3
info:
  title: LinkedOut - External API
  description: The external API for the LinkedOut school project.
  version: 1.0.0
tags:
  - name: Profile
    description: Profile of a user
  - name: Reference
    description: References (people who can recommand) of a user
  - name: Experience
    description: Professional experiences of a user
  - name: Evaluation
    description: Evaluations (score and review) of a user
  - name: Job offers
    description: Jobs that are available for the users
  - name: Messaging
    description: Private messaging between an employer and a user
  - name: Employer
    description: Profile of an employer
  - name: Notification
    description: Notifications about important events
  - name: Job
    description: Known jobs and job categories
  - name: Company
    description: Known companies
paths:
  # Profile
  /profile:
    put:
      tags:
        - Profile
      summary: Set the logged-in user profile data.
      description: Can only be used by logged-in users.
      operationId: setMyProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Profile set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Invalid request payload
        '401':
          description: User is not authenticated
    get:
      tags:
        - Profile
      summary: Get the logged-in user profile data.
      description: Can only be used by logged-in users.
      operationId: getMyProfile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: User is not authenticated
    patch:
      tags:
        - Profile
      summary: Update the logged-in user profile data.
      description: Can only be used by logged-in users.
      operationId: updateMyProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Invalid request payload
        '401':
          description: User is not authenticated
  /profile/cv:
    post:
      tags:
        - Profile
      summary: Set the logged-in user CV file.
      description: Can only be used by logged-in users.
      operationId: setMyCV
      requestBody:
        content:
          application/pdf:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: User CV set successfully
        '401':
          description: User is not authenticated
    get:
      tags:
        - Profile
      summary: Get the logged-in user CV file.
      description: Can only be used by logged-in users.
      operationId: getMyCV
      responses:
        '200':
          description: User CV retrieved successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: User is not authenticated
  /profile/photo:
    post:
      tags:
        - Profile
      summary: Set the logged-in user profile picture.
      description: Can only be used by logged-in users.
      operationId: setMyProfilePicture
      requestBody:
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: User profile picture set successfully
        '401':
          description: User is not authenticated
    get:
      tags:
        - Profile
      summary: Get the logged-in user profile picture.
      description: Can only be used by logged-in users.
      operationId: getMyProfilePicture
      responses:
        '200':
          description: User profile picture retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '401':
          description: User is not authenticated
  /profile/requestDeletion:
    post:
      tags:
        - Profile
      summary: Request to delete the logged-in user profile.
      description: Can only be used by logged-in users.
      operationId: requestDeleteMyProfile
      responses:
        '200':
          description: Profile deletion requested successfully
        '401':
          description: User is not authenticated
    get:
      tags:
        - Profile
      summary: Get the user profiles who requested deletion.
      description: Can only be used by administrators.
      operationId: getDeletionRequestedProfile
      responses:
        '200':
          description: Profiles who requested deletion retrieved successfully
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  type: integer
                  format: int64
                example:
                - 1
                - 3
                - 4
        '401':
          description: User is not authenticated
        '403':
          description: User is not authorized to get profiles who requested deletion
  /profile/{userId}:
    delete:
      tags:
        - Profile
      summary: Delete a user profile.
      description: Can only be used by administrators.
      operationId: deleteProfile
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Profile deleted successfully
        '401':
          description: User is not authenticated
        '403':
          description: User is not authorized to delete a profile
        '404':
          description: User profile not found
  # Reference
  /profile/references:
    post:
      tags:
        - Reference
      summary: Create a reference for the logged-in user.
      description: Can only be used by logged-in users.
      operationId: createMyProfileSingleReference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reference'
      responses:
        '200':
          description: Reference created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'
        '401':
          description: User is not authenticated
    get:
      tags:
        - Reference
      summary: Get the logged-in user references.
      description: Can only be used by logged-in users.
      operationId: getMyProfileReferences
      responses:
        '200':
          description: References retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reference'
        '401':
          description: User is not authenticated
  /profile/references/{referenceId}:
    patch:
      tags:
        - Reference
      summary: Update a reference of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: updateMyProfileSingleReference
      parameters:
        - $ref: '#/components/parameters/referenceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reference'
      responses:
        '200':
          description: Reference updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'
        '400':
          description: Invalid request payload
        '401':
          description: User is not authenticated
        '404':
          description: Reference not found
    get:
      tags:
        - Reference
      summary: Get a reference of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getMyProfileSingleReference
      parameters:
        - $ref: '#/components/parameters/referenceId'
      responses:
        '200':
          description: Reference retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'
        '401':
          description: User is not authenticated
        '404':
          description: Reference not found
    delete:
      tags:
        - Reference
      summary: Delete a reference of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: deleteMyProfileSingleReference
      parameters:
        - $ref: '#/components/parameters/referenceId'
      responses:
        '200':
          description: Reference deleted successfully
        '401':
          description: User is not authenticated
        '404':
          description: Reference not found
  # Experience
  /profile/experiences:
    post:
      tags:
        - Experience
      summary: Create an experience for the logged-in user.
      description: Can only be used by logged-in users.
      operationId: createMyProfileSingleExperience
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Experience'
      responses:
        '200':
          description: Experience created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '401':
          description: User is not authenticated
    get:
      tags:
        - Experience
      summary: Get the logged-in user experiences.
      description: Can only be used by logged-in users.
      operationId: getMyProfileExperiences
      responses:
        '200':
          description: Experiences retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Experience'
        '401':
          description: User is not authenticated
  /profile/experiences/{experienceId}:
    patch:
      tags:
        - Experience
      summary: Update an experience of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: updateMyProfileSingleExperience
      parameters:
        - $ref: '#/components/parameters/experienceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Experience'
      responses:
        '200':
          description: Experience updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '400':
          description: Invalid request payload
        '401':
          description: User is not authenticated
        '404':
          description: Experience not found
    get:
      tags:
        - Experience
      summary: Get an experience of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getMyProfileSingleExperience
      parameters:
        - $ref: '#/components/parameters/experienceId'
      responses:
        '200':
          description: Experience retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '401':
          description: User is not authenticated
        '404':
          description: Experience not found
    delete:
      tags:
        - Experience
      summary: Delete an experience of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: deleteMyProfileSingleExperience
      parameters:
        - $ref: '#/components/parameters/experienceId'
      responses:
        '200':
          description: Experience deleted successfully
        '401':
          description: User is not authenticated
        '404':
          description: Experience not found
  # Evaluation
  /profile/evaluations:
    get:
      tags:
        - Evaluation
      summary: Get the logged-in user evaluations.
      description: Can only be used by logged-in users.
      operationId: getMyProfileEvaluations
      responses:
        '200':
          description: Evaluations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evaluation'
        '401':
          description: User is not authenticated
  /profile/evaluations/{evaluationId}:
    get:
      tags:
        - Evaluation
      summary: Get an evaluation of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getMyProfileSingleEvaluation
      parameters:
        - $ref: '#/components/parameters/evaluationId'
      responses:
        '200':
          description: Evaluation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
        '401':
          description: User is not authenticated
        '404':
          description: Evaluation not found
  # Job offers
  /jobOffers:
    get:
      tags:
        - Job offers
      summary: Get the job offers.
      description: Can only be used by logged-in users.
      operationId: getJobOffers
      parameters:
        - in: query
          name: sortBy
          description: The strategy to use to sort the results.
          schema:
            type: string
            enum: [creation, recommendation]
        - in: query
          name: onlyApplied
          description: Filter out job offers that the logged-in user didn't apply for.
          schema:
            type: boolean
      responses:
        '200':
          description: Job offers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobOffer'
        '401':
          description: User is not authenticated
  /jobOffers/{jobOfferId}:
    get:
      tags:
        - Job offers
      summary: Get a job offer.
      description: Can only be used by logged-in users.
      operationId: getSingleJobOffer
      parameters:
        - $ref: '#/components/parameters/jobOfferId'
      responses:
        '200':
          description: Job offer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOffer'
        '401':
          description: User is not authenticated
        '404':
          description: Job offer not found
  /jobOffers/{jobOfferId}/apply:
    post:
      tags:
        - Job offers
      summary: Apply to a job offer.
      description: Can only be used by logged-in users.
      operationId: applyToJobOffer
      parameters:
        - $ref: '#/components/parameters/jobOfferId'
      responses:
        '200':
          description: Job offer applied to successfully
        '401':
          description: User is not authenticated
        '404':
          description: Job offer not found
  # Messaging
  /messaging:
    get:
      tags:
        - Messaging
      summary: Get the message channels of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getMessageChannels
      responses:
        '200':
          description: Message channels retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageChannel'
        '401':
          description: User is not authenticated
  /messaging/{messageChannelId}:
    get:
      tags:
        - Messaging
      summary: Get a message channel of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getSingleMessageChannel
      parameters:
        - $ref: '#/components/parameters/messageChannelId'
      responses:
        '200':
          description: Message channel retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageChannel'
        '401':
          description: User is not authenticated
        '404':
          description: Message channel not found
  /messaging/{messageChannelId}/messages:
    post:
      tags:
        - Messaging
      summary: Send a message to a message channel.
      description: Can only be used by logged-in users.
      operationId: sendMessage
      parameters:
        - $ref: '#/components/parameters/messageChannelId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User is not authenticated
        '404':
          description: Message channel not found
    get:
      tags:
        - Messaging
      summary: Get the messages of a message channel.
      description: Can only be used by logged-in users.
      operationId: getMessages
      parameters:
        - $ref: '#/components/parameters/messageChannelId'
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: User is not authenticated
        '404':
          description: Message channel not found
  # Employer
  /employers/{employerId}:
    get:
      tags:
        - Employer
      summary: Get the profile of an employer.
      description: Can only be used by logged-in users.
      operationId: getSingleEmployer
      parameters:
        - $ref: '#/components/parameters/employerId'
      responses:
        '200':
          description: Employer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employer'
        '401':
          description: User is not authenticated
        '404':
          description: Employer not found
  /employers/{employerId}/evaluations:
    post:
      tags:
        - Employer
      summary: Create/update the evaluation of an employer for the logged-in user.
      description: Can only be used by logged-in users.
      operationId: updateSingleEmployerEvaluation
      parameters:
        - $ref: '#/components/parameters/employerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployerEvaluation'
      responses:
        '200':
          description: Employer evaluation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployerEvaluation'
        '401':
          description: User is not authenticated
        '404':
          description: Employer not found
    get:
      tags:
        - Employer
      summary: Get the evaluation of an employer by the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getSingleEmployerEvaluation
      parameters:
        - $ref: '#/components/parameters/employerId'
      responses:
        '200':
          description: Employer evaluation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployerEvaluation'
        '401':
          description: User is not authenticated
        '404':
          description: Employer not found
    delete:
      tags:
        - Employer
      summary: Delete the evaluation of an employer for the logged-in user.
      description: Can only be used by logged-in users.
      operationId: deleteSingleEmployerEvaluation
      parameters:
        - $ref: '#/components/parameters/employerId'
      responses:
        '200':
          description: Employer evaluation deleted successfully
        '401':
          description: User is not authenticated
        '404':
          description: Employer or employer evaluation not found
  /employers/{employerId}/messaging:
    post:
      tags:
        - Employer
      summary: Send a message to an employer.
      description: Can only be used by logged-in users.
      operationId: sendMessageByEmployer
      parameters:
        - $ref: '#/components/parameters/employerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User is not authenticated
        '404':
          description: Employer not found
    get:
      tags:
        - Employer
      summary: Get the message channel with an employer.
      description: Can only be used by logged-in users.
      operationId: getSingleMessageChannelByEmployer
      parameters:
        - $ref: '#/components/parameters/employerId'
      responses:
        '200':
          description: Message channel retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageChannel'
        '401':
          description: User is not authenticated
        '404':
          description: Employer or message channel not found
  # Notification
  /notifications:
    get:
      tags:
        - Notification
      summary: Get the notifications of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getAllNotifications
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '401':
          description: User is not authenticated
  # Job
  /jobs:
    get:
      tags:
        - Job
      summary: Get every known jobs.
      description: Can only be used by logged-in users.
      operationId: getAllJobs
      responses:
        '200':
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '401':
          description: User is not authenticated
  /jobs/{jobId}:
    get:
      tags:
        - Job
      summary: Get a known job.
      description: Can only be used by logged-in users.
      operationId: getSingleJob
      parameters:
        - $ref: '#/components/parameters/jobId'
      responses:
        '200':
          description: Job retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          description: User is not authenticated
        '404':
          description: Job not found
  /jobs/categories:
    get:
      tags:
        - Job
      summary: Get every known job categories.
      description: Can only be used by logged-in users.
      operationId: getAllJobCategories
      responses:
        '200':
          description: Job categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobCategory'
        '401':
          description: User is not authenticated
  /jobs/byCategory/{jobCategory}:
    get:
      tags:
        - Job
      summary: Get every job for a category.
      description: Can only be used by logged-in users.
      operationId: getAllJobsByCategory
      parameters:
        - $ref: '#/components/parameters/jobCategory'
      responses:
        '200':
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '401':
          description: User is not authenticated
  # Company
  /companies:
    get:
      tags:
        - Company
      summary: Get every known companies.
      description: Can only be used by logged-in users.
      operationId: getAllCompanies
      responses:
        '200':
          description: Companies retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '401':
          description: User is not authenticated
  /companies/{companyId}:
    get:
      tags:
        - Company
      summary: Get a known company.
      description: Can only be used by logged-in users.
      operationId: getSingleCompany
      parameters:
        - $ref: '#/components/parameters/companyId'
      responses:
        '200':
          description: Company retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '401':
          description: User is not authenticated
        '404':
          description: Company not found
components:
  schemas:
    Address:
      type: object
      properties:
        firstLine:
          type: string
          example: 52 rue des Saints-Pères
        zipCode:
          type: string
          example: 75107
        city:
          type: string
          example: Paris
    Company:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: Wonder
    Job:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: Homme d'affaires
          readOnly: true
        category:
          type: string
          example: Autre
          readOnly: true
    JobCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        category:
          type: string
          example: Autre
          readOnly: true
    Profile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        firstName:
          type: string
          example: Bernard
        lastName:
          type: string
          example: Tapie
        gender:
          type: integer
          format: int8
          example: 1
        birthday:
          type: string
          format: date
          example: 1943-01-26
        nationality:
          type: string
          format: ISO 3166-1 alpha-3
          example: FRA
        address:
          $ref: '#/components/schemas/Address'
        phone:
          type: string
          format: phone
          example: '0695154879'
        email:
          type: string
          format: email
          example: bernard.tapie@gmail.com
        shortBiography:
          type: string
          example: |-
            Entrepreneur, politique et ancien propriétaire de l'Olympique de Marseille.
            Expérience étendue en business et services publics.
        deletionRequested:
          type: boolean
          example: false
          readOnly: true
        nbExperiences:
          type: integer
          format: int64
          example: 3
          readOnly: true
        nbReviews:
          type: integer
          format: int64
          example: 2
          readOnly: true
    Reference:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        firstName:
          type: string
          example: Patrick
        lastName:
          type: string
          example: Balkany
        address:
          $ref: '#/components/schemas/Address'
        phone:
          type: string
          format: phone
          example: '0680459527'
        email:
          type: string
          format: email
          example: patrick.balkany@gmail.com
        company:
          $ref: '#/components/schemas/Company'
    Experience:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        startDate:
          type: string
          format: date
          example: 1986-02-28
        endDate:
          type: string
          format: date
          example: 1987-02-29
        address:
          $ref: '#/components/schemas/Address'
        company:
          $ref: '#/components/schemas/Company'
        job:
          allOf:
          - $ref: '#/components/schemas/Job'
          - readOnly: true
        jobId:
          type: integer
          format: int64
          example: 1
          writeOnly: true
    Availability:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        startDate:
          type: string
          format: date
          example: 2022-10-21
        endDate:
          type: string
          format: date
          example: 2023-03-14
        geographicArea:
          type: string
          example: Paris, 16ème arrondissement
        jobCategory:
          allOf:
          - $ref: '#/components/schemas/Job'
          - readOnly: true
        jobCategoryId:
          type: integer
          format: int64
          example: 1
          writeOnly: true
    Evaluation:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        employerFirstName:
          type: string
          example: François
          readOnly: true
        employerLastName:
          type: string
          example: Mitterand
          readOnly: true
        score:
          type: integer
          format: int8
          example: 5
          readOnly: true
        review:
          type: string
          example: Bernard est un employé modèle. Il cherche toujours à réussir, et cela peu importe la tâche.
          readOnly: true
        createdAt:
          type: string
          format: date-time
          example: 2022-10-16T15:29:31Z
          readOnly: true
    JobOffer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: Femme de ménage
        description:
          type: string
          example: |-
            Nous recherchons des femmes de ménage saisonniers enthousiastes pour rejoindre notre équipe dynamique au restaurant L'Entrecôte.
            Si vous êtes passionné par le ménage, les produits d'entretien exceptionnels, et que vous aimez travailler dans une ambiance conviviale, nous aimerions vous rencontrer.
        startDate:
          type: string
          format: date
          example: 2023-08-23
        endDate:
          type: string
          format: date
          example: 2023-12-12
        geographicArea:
          type: string
          example: Paris, 16ème arrondissement
        status:
          type: integer
          format: int8
          example: -1
    MessageChannel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        employer:
          $ref: '#/components/schemas/Employer'
        lastMessage:
          type: string
          example: Salut Bernard, ton profil m'interesse.
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        channelId:
          type: integer
          format: int64
          example: 1
          readOnly: true
        employerId:
          type: integer
          format: int64
          example: 1
          readOnly: true
        direction:
          type: integer
          format: int8
          example: 0
          readOnly: true
        sentAt:
          type: string
          format: date-time
          example: 2023-10-23T09:34:19Z
          readOnly: true
        content:
          type: string
          example: Coucou sarko, dis moi tout...
    Employer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        firstName:
          type: string
          example: Nicolas
          readOnly: true
        lastName:
          type: string
          example: Sarkozy
          readOnly: true
        picture:
          type: string
          format: uri
          example: https://upload.wikimedia.org/wikipedia/commons/c/ca/Flickr_-_europeanpeoplesparty_-_EPP_Summit_October_2010_(105)-(cropped).jpg
          readOnly: true
        phone:
          type: string
          format: phone
          example: '0677096463'
    EmployerEvaluation:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        score:
          type: integer
          format: int8
          example: 2
        review:
          type: string
          example: François était au départ, un employeur modèle, mais il a vite montré son véritable visage...
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: Candidature refusée
          readOnly: true
        content:
          type: string
          example: Votre candidature à l'offre "Serveur à l'entrecôte" à été refusée par l'employeur.
          readOnly: true
        sentAt:
          type: string
          format: date-time
          example: 2023-10-23T09:34:19Z
          readOnly: true
  parameters:
    userId:
      name: userId
      description: Unique identifier of a user.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    referenceId:
      name: referenceId
      description: Unique identifier of a reference.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    experienceId:
      name: experienceId
      description: Unique identifier of an experience.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    jobId:
      name: jobId
      description: Unique identifier of a job.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    jobCategory:
      name: jobCategory
      description: Unique identifier of a job category.
      in: path
      required: true
      schema:
        type: string
    companyId:
      name: companyId
      description: Unique identifier of a company.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    evaluationId:
      name: evaluationId
      description: Unique identifier of an evaluation.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    jobOfferId:
      name: jobOfferId
      description: Unique identifier of a job offer.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    employerId:
      name: employerId
      description: Unique identifier of an employer.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    messageChannelId:
      name: messageChannelId
      description: Unique identifier of a message channel.
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1